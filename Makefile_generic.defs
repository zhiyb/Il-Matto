# Author: Yubo Zhi (yz39g13@soton.ac.uk)

# Outdated warning
define outdated
$(warning "$$($1) outdated, use $$($2) instead")
endef

# Change variable type to simply-expanded
SRC	:= $(SRC)
LIB	:= $(LIB)
LIBS	:= $(LIBS)
DEFS	:= $(DEFS)
INCDIRS	:= $(INCDIRS)

# Defaults
ifndef OPTIMIZE
OPTLEVEL	?= s
endif
#CROSS_COMPILE	?=
DEPDIR	?= .deps
TOPDIR	?= $(dir $(lastword $(MAKEFILE_LIST)))

# Subdirectories
define inc_subdir
DIR	:= $(1)
include $(1)/Makefile
SRC	+= $$(NSRC:%=$$(DIR)/%)
LIB	+= $$(NLIB)
LIBS	+= $$(NLIBS)
DEFS	+= $$(NDEFS)
INCDIRS	+= $$(NINCDIRS:%=$$(DIR)/%)
endef

$(foreach dir,$(SUBDIRS),$(eval $(call inc_subdir,$(dir))))

# Libs
ifndef LIBTRG
LIBDIR	?= $(TOPDIR)
else
LIBDIR	?= ..
endif
LIBDIRS	= $(LIB:%=$(LIBDIR)/lib%)
LIBCONFS	= $(LIBDIRS:%=%/Makefile.conf)
LIBFILES	= $(foreach lib,$(LIB),$(lib:%=$(LIBDIR)/lib%)/$(lib:%=lib%.a))
-include $(LIBCONFS)

ifndef LIBTRG
ifndef TRG
$(call outdated,PRG,TRG)
TRG	= $(PRG)
endif
define checkconf
ifeq ($$($1),y)
	DEFS	+= -D$1
endif
endef
DEFS	+= $(foreach conf,$(CONFS),-D$(conf)=$($(conf)))
$(foreach conf,$(CONFS_D),$(eval $(call checkconf,$(conf))))
endif

ifndef CROSS_COMPILE
ifeq ($(OS),Windows_NT)
	SUFFIX	?= .exe
endif
endif

#DEFS	+= -fpack-struct -fshort-enums
#DEFS	+= -funsigned-bitfields -funsigned-char
NEWLIBS	= $(LIBDIRS:%=-L%) $(LIB:%=-l%)
INCS	+= $(LIBDIRS:%=-I%)
INCS	+= $(INCDIRS:%=-I%)

ELF	= $(TRG)$(SUFFIX)
OBJS	= $(subst .S,.o,$(subst .c,.o,$(SRC:.cpp=.o)))

AR	= $(CROSS_COMPILE)ar
AS	= $(CROSS_COMPILE)gcc
CC	= $(CROSS_COMPILE)gcc
CXX	= $(CROSS_COMPILE)g++
LD	= $(CROSS_COMPILE)g++
SIZE	= $(CROSS_COMPILE)size

FLAGS	?= -g -Wall
#FLAGS	+= -Werror
FLAGS	+= $(OPTIMIZE) -O$(OPTLEVEL)

# Exports
export DEFS OPTIMIZE OPTLEVEL $(CONFS) CONFS CONFS_D

ARFLAGS	= $(ARFLG) rcs
ifdef $(OVERRIDE)
override ASFLAGS	= $(ASFLAG) $(DEFS) $(INCS) $(FLAGS)
override CFLAGS	= $(CFLAG) $(DEFS) $(INCS) $(FLAGS)
override CXXFLAGS	= $(CXXFLAG) $(DEFS) $(INCS) $(FLAGS)
override LDFLAGS	= $(LDFLAG) $(FLAGS)
else
ASFLAGS	= $(ASFLAG) $(DEFS) $(INCS) $(FLAGS)
CFLAGS	= $(CFLAG) $(DEFS) $(INCS) $(FLAGS)
CXXFLAGS	= $(CXXFLAG) $(DEFS) $(INCS) $(FLAGS)
LDFLAGS	= $(LDFLAG) $(FLAGS)
endif

# Verbose display
define verbose
	@if [ 'x$(VERBOSE)' = x ]; then	\
		echo "  "$1;		\
	else				\
		echo $2;		\
	fi
	@$2
endef

# Rules
ifdef LIBTRG
all: lib
else
all: $(ELF) $(EXTRA_TARGETS)
CLEAN_FILES	+= $(ELF)
endif

CLEAN_FILES	+= $(OBJS)
$(ELF): $(OBJS) $(LIBFILES)
	$(call verbose,"LD	$@",\
	$(LD) $(LDFLAGS) -o $@ $(OBJS) $(NEWLIBS) $(LIBS))
	$(call verbose,"SIZE	$@",\
	$(SIZE) $@)

%.o: %.c
	@mkdir -p $(dir $(DEPDIR)/$<)
	$(call verbose,"CC	$<",\
	$(CC) $(CFLAGS) -c -o $@ $<) -MD -MP -MF "$(DEPDIR)/$*.d"

%.o: %.cpp
	@mkdir -p $(dir $(DEPDIR)/$<)
	$(call verbose,"CXX	$<",\
	$(CC) $(CFLAGS) -c -o $@ $<) -MD -MP -MF "$(DEPDIR)/$*.d"

%.o: %.S
	$(call verbose,"AS	$<",\
	$(AS) $(ASFLAGS) -c -o $@ $<)

%.lst: %$(SUFFIX)
	$(call verbose,"GEN	$@",\
	$(OBJDUMP) -h -S $< > $@)

ifdef LIBTRG
# Rule for building library
.PHONY: lib
lib: lib-static

.PHONY: lib-static
lib-static: lib$(LIBTRG).a
CLEAN_FILES	+= lib$(LIBTRG).a

lib$(LIBTRG).a: $(OBJS)
	$(call verbose,"AR	$@",\
	$(AR) $(ARFLAGS) $@ $(OBJS))
endif

# Libraries
$(LIBFILES): %:
	$(call verbose,"MAKE	$@",\
	$(MAKE) -C $(dir $@))

# Dependency
-include $(OBJS:%.o=$(DEPDIR)/%.d)
CLEAN_DIRS	+= $(DEPDIR)

# Clean up
ifndef LIBTRG
CLEAN_LIBS	+= $(LIBDIRS:%=clean-%)
endif
.PHONY: $(CLEAN_LIBS)
$(CLEAN_LIBS):
	$(call verbose,"CLEAN	$(@:clean-%=%)",\
	$(MAKE) -C $(@:clean-%=%) clean)

.PHONY: clean
clean: $(CLEAN_LIBS)
	$(call verbose,"CLEAN	$(CLEAN_FILES)",\
	$(RM) $(CLEAN_FILES))
	$(call verbose,"CLEAN	$(CLEAN_DIRS)",\
	$(RM) -r $(CLEAN_DIRS))
